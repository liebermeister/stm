%---------------------------------------------------------
% demo_elasticity_sampling_noor_2016
% Demo script for thermodynamically feasible elasticity sampling 
%---------------------------------------------------------

clear; clearvars -global

% check correct installation of elasticity sampling code
es_dependencies; 

model_dir = [es_BASEDIR '/../resources/models/model_noor_2016_modified'];

cd(model_dir);

%---------------------------------------------------------
% Elasticity sampling demo
%
% In this script, we load a metabolic network model, 
% run elasticity sampling with two types of rate laws, 
% and compare the results of the two model ensembles 
%---------------------------------------------------------


%-------------------------------------------------------------------------------
% Load network model ('network') and concentration and flux vectors ('c' and 'v') from SBtab file

% The input file was generated by matlab script 'ecoli_noor_2016_modified_reference_state.m'
%
% Note that this is NOT the original Noor 2016 model, but a modified version
% allowing for a stationary flux distribution similar to measured fluxes

model_state_file = [model_dir filesep 'e_coli_noor_2016_plus_overflow_oxa_internal_ModelState.tsv'];

[network, c, v]  = sbtab_network_state_load(model_state_file);

% [network.N' * log(c) - network.kinetics.Keq, v]

%-------------------------------------------------------------------------------
% The matlab command for elasticity sampling requires the stoichiometric matrix N 
% and the allosteric regulation matrix W.

% We extract these matrices from the network structure.
 
N = network.N;                  % stoichiometric matrix 
W = network.regulation_matrix;  % allosteric regulation matrix
 

%-------------------------------------------------------------------------------
% User options for elasticity sampling are stored in two matlab structs,
% 'es_options' and 'es_constraints'. 
 
% 'es_options' contains general settings for the calculation workflow, 
% 'es_constraints' contains numerical details about the model.
 
[es_options, es_constraints] = es_default_options(N);


%-------------------------------------------------------------------------------
% After inserting the flux mode into 'es_constraints', we run elasticity sampling 
% All output will be stored in a data structure 'result'
 
% Set fixed fluxes, concentrations, and equilibrium constants

es_constraints.v_fix         = v;
es_constraints.log_c_fix     = log(c);
es_constraints.Keq_fix       = network.kinetics.Keq;

es_constraints.dmu_limit_min = 0.05;

es_options.ind_ignore        = [];
es_options.flag_second_order = 0;
es_options.sampling_method   = 'v from data';
es_options.kinetic_law       = 'cs';
es_options.flag_second_order = 1;
es_options.print_graphics    = 0;

[result, fluxes, es_options, es_constraints] = es_reference_state(network, es_options, es_constraints);


% ---------------------------------------
% Graphics
% ---------------------------------------

% For clarity, omit NAD compounds from graphics 
% network.graphics_par.omitmetabolites       = {'NAD+ [c]', 'NAD+ [m]', 'NADH [c]', 'NADH [m]'};

target_reaction    = 'Overflow'; 

ca;
es_reference_state_graphics(network, es_options, result, target_reaction);
