% ---------------------------------------------------
% E. coli model (modified version of model from Noor 2016, adapted for steady states)
%    (uses balanced kinetic constants generated by e_coli_ccm_STM_balance_parameters.m)
%
% This script performs the following tasks:
%  o read model and data from SBtab files (in directory 'original_model_and_data')
%  o compute metabolic steady state (stationary fluxes, thermo-feasible metabolite levels), 
%  o generate matlab data structure 'network' and vectors 'v' and 'c'
%  o save model and state variables to sbtab and .mat files (in directory 'model_and_metabolic_state')
% ---------------------------------------------------


% ------------------------------------
% Set input and output filenames

save_files = 0;

mydir           = [es_BASEDIR  '/../resource-data/models-article/Escherichia_coli_ccm/'];
state_data_file = [mydir 'original_model/e_coli_noor_2016_state_data_modified.tsv'];

%% use balanced kinetic constants generated by e_coli_ccm_STM_balance_parameters.m
network_model_file     = [mydir 'original_model/e_coli_noor_2016_plus_overflow_oxa_internal_network.tsv'];
kinetic_data_file      = [mydir 'original_model/e_coli_noor_2016_plus_overflow_oxa_internal_Parameter.tsv'];
model_state_file_out   = [mydir 'model/e_coli_ccm_STM_ModelState.tsv'];
model_state_file_mat   = [mydir 'model/e_coli_ccm_STM.mat'];
graphics_file          = [mydir 'model/e_coli_ccm_STM.jpg'];
layout_file            = [mydir 'original_model/e_coli_ccm_Position.tsv'];


% ------------------------------------
% Load model and data from original SBtab files

file_options.match_data_by        = 'ModelElementId';
file_options.metabolite_table_id  = 'Concentration';
file_options.flux_table_id        = 'Flux';
file_options.enzyme_table_id      = 'EnzymeConcentration';
file_options.delta_g_table_id     = [];
file_options.columns_mean         = {'Value'};
file_options.columns_std          = [];
file_options.load_quantity_table  = 1;
file_options.prior_file           = [es_BASEDIR  '../resource-data/data/data-general/cmb_prior.tsv'];

result  = sbtab_load_network_model_and_data({network_model_file, kinetic_data_file, state_data_file},file_options);

network = result.network;
v_data  = result.state_data.flux_data.Mean;
c_data  = result.state_data.metabolite_data.Mean;
u_data  = result.state_data.enzyme_data.Mean;


% ------------------
% Compute stationary fluxes v (projection of measured flux data)

v_fix  = nan*v_data; v_fix(v_data==0) = 0; 
v_fix(label_names( {'PPC_R00345'}, network.actions)) = -0.1;
v_sign = sign(v_data);
v_std  = sqrt(abs(v_data));
v      = project_fluxes(network.N, find(network.external), v_data, v_std, v_sign, struct('verbose',1),v_fix);


% ------------------
% Compute metabolite concentrations c

% Simple variant  (completion of measured values): 
% replace unknown concentrations by geometric mean (may be thermodynamically inconsistent)
% c = c_data;
% c(isnan(c)) = exp(mean(log(c_data(~isnan(c_data)))));

% Thermodynamically feasible variant (thermodynamic parameter balancing)

delta_G0 = -RT * log(network.kinetics.Keq);

thermo_pb_options.c_min     = 0.5 * c_data;
thermo_pb_options.c_max     = 2   * c_data;
thermo_pb_options.log_c     = c_data;
thermo_pb_options.log_c_std = log(1.5) * ones(size(c_data));

thermo_pb_options.c_min(isnan(thermo_pb_options.c_min)) = 0.000001;
thermo_pb_options.c_max(isnan(thermo_pb_options.c_max)) = 10;
thermo_pb_options.delta_G0 = delta_G0; 

[c, dG0, A, feasible] = thermo_pb(network.N, v, thermo_pb_options, 1);

% adjust kinetic constants to balanced equilibrium constants
network.kinetics.Keq = exp(-dG0/RT); 
network.kinetics.KV = sqrt(network.kinetics.Kcatf.*network.kinetics.Kcatr);
network.kinetics.KV(isnan(network.kinetics.KV)) = 100;
network.kinetics.KM(isnan(network.kinetics.KM))=0.1; 
network.kinetics.KM(network.kinetics.KM==0)=0.1; 
network.kinetics.KM(network.N'==0)=0; 
[network.kinetics.Kcatf, network.kinetics.Kcatr] = modular_KV_Keq_to_kcat(network.N,network.kinetics,network.kinetics.KV,network.kinetics.Keq,network.kinetics.KM);

% Check
if ~feasible,  
  [RT * [log(network.kinetics.Keq) - network.N' * log(c)], A]
  error('Concentrations cannot be realised by feasible state'); 
end
modular_rate_law_haldane(network) 


% ----------------------------------
% Apply network layout

network = netgraph_read_positions(network,layout_file);

network_split = netgraph_split_metabolites(network, {'ATP','ADP','CO2','NADPH','NADPplus','NADH','NADplus','Orthophosphate'});
network_split = netgraph_read_positions(network_split,layout_file);

% ----------------------------------
% Edit network layout (NOTE THAT LAYOUT FILE IS PART OF ROBERTO's git repo!)
% network_split = netgraph_edit_positions(network_split,layout_file);
% ----------------------------------


% ----------------------------------
% Save model, concentrations and fluxes as SBtab file

if save_files,
  sbtab_network_state_save(network, c, v, model_state_file_out, -RT * [log(network.kinetics.Keq) - network.N' * log(c)]);
end

% Test: load the data again
% [network,c,v] = sbtab_network_state_load(model_state_file_out  );

% ----------------------------------
% Save model as matlab data structure 'network', as well as concentrations 'c' and fluxes 'v'

if save_files,
  save(model_state_file_mat,'network', 'network_split', 'v','c');
end

% ----------------------------------
% Graphics 

ca

figure(1); 
netgraph_concentrations(network,network.external,[],1);

figure(10); 
netgraph_concentrations(network_split,network.external,[],1);

figure(2); 
plot(v_data, v,'ro');

figure(3); 
netgraph_concentrations(network_split,log10(c)-min(log10(c)),[],1,struct('arrowvalues',sign(v),'arrowstyle','fluxes','arrowsize',0.03,'arrowcolor',[1 0 0]))

figure(4); 
netgraph_concentrations(network_split,log10(c_data)-min(log10(c_data)),[],1,struct('arrowvalues',v_data,'arrowstyle','fluxes','arrowsize',0.03,'arrowcolor',[1 0 0]))

% print(graphics_file,'-f3','-djpeg');


% ----------------------------------
% Check whether Jacobian matrix has (structurally caused) zero eigenvalues
% ----------------------------------
% 
% load([stm_code_basedir filesep 'model_e_coli_ccm' filesep 'model/version_overflow/e_coli_ccm_overflow_ModelState.tsv']);
% 
% int  = find(network.external==0);
% Nint = network.N(int,v~=0);
% eig(Nint * Nint')
% 
% [K, myL, myNR, G, pinv_N_R, indep, N_1] = network_analyse(network);
% 
% myJ_red = -myNR * Nint' * myL;
% eig(myJ_red)
% 
% figure(5); 
% im(K,[],network.metabolites(int))
